{"ast":null,"code":"var _jsxFileName = \"/Users/tobias/LurryTestContract&Website/TestWebsite/src/Mint.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport SecretLurrySociety from './utils/SecretLurrySociety.json';\nimport './styles/Mint.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MintPage = () => {\n  _s();\n\n  // State variable to store user's public wallet address\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    // First make sure we have access to window.ethereum\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    } // Check if authorized to access user's wallet\n\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    }); // Users can have multiple authorized accounts, so we grab the first once\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }; // Connect wallet function used when user clicks connect wallet button\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      } // Request access to user's account\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      }); // Should print out the user's public address to the console\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0x26b5180d5ce04124ED1f4402f7c9fDB108856d8c\";\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, SecretLurrySociety.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.mintALurry();\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Render Methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this); // Runs the check function on page load\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []); //  Added a conditional render! We don't want to show Connect to Wallet if we're already conencted :).\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MintPage\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lurry-welcome\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"crayon-lurry-mintpage-image\",\n        src: \"https://gateway.pinata.cloud/ipfs/QmXHdHBYwQH3uQqKqXUJotZXHqTU6KeTHhdx9czqp4FJW8?preview=1\",\n        alt: \"Crayon Lurry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"welcome-box\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"welcome-box_content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"welcome\",\n            children: \"Welcome!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"info\",\n            children: [\"Floatie Lurry is a collection of 12 unique Lurry\\u2019s.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 80\n            }, this), \"Inspired by the bright yellow rubber duck that all\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 59\n            }, this), \"programmers know and explaining their code to.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 55\n            }, this), \"Floatie Lurry NFTs live, breathe an swim on the\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 56\n            }, this), \"blockchain.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 9\n          }, this), currentAccount === \"\" ? renderNotConnectedContainer() : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: askContractToMintNft,\n            className: \"mint-button\",\n            children: \"Mint!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MintPage, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = MintPage;\nexport default MintPage; // <div className=\"App\">\n//   <div className=\"container\">\n//     <div className=\"header-container\">\n//       <p className=\"header gradient-text\">Secret Lurry Society</p>\n//       <p className=\"sub-text\">\n//         Mint a Lurry NFT. Gain access to the most exclusive programming community on the Ethereum Blockchain.\n//       </p>\n//       {currentAccount === \"\" ? (\n//         renderNotConnectedContainer()\n//       ) : (\n//         <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n//           Mint NFT\n//         </button>\n//       )}\n//     </div>\n//     <div className=\"footer-container\">\n//     </div>\n//   </div>\n// </div>\n\nvar _c;\n\n$RefreshReg$(_c, \"MintPage\");","map":{"version":3,"sources":["/Users/tobias/LurryTestContract&Website/TestWebsite/src/Mint.jsx"],"names":["React","useEffect","useState","ethers","SecretLurrySociety","MintPage","currentAccount","setCurrentAccount","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","connectWallet","alert","error","askContractToMintNft","CONTRACT_ADDRESS","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","nftTxn","mintALurry","wait","hash","renderNotConnectedContainer"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,OAAO,mBAAP;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCL,QAAQ,CAAC,EAAD,CAApD;;AAEA,QAAMM,wBAAwB,GAAG,YAAY;AAC3C;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAeC,MAArB;;AAEA,QAAI,CAACD,QAAL,EAAe;AACbE,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA;AACD,KAHD,MAGO;AACLD,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CH,QAA3C;AACD,KAT0C,CAW3C;;;AACA,UAAMI,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAvB,CAZ2C,CAc3C;;AACA,QAAIF,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACzB,YAAMC,OAAO,GAAGJ,QAAQ,CAAC,CAAD,CAAxB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CK,OAA5C;AACAV,MAAAA,iBAAiB,CAACU,OAAD,CAAjB;AACD,KAJD,MAIO;AACLN,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACD;AACF,GAtBD,CAJqB,CA4BrB;;;AACA,QAAMM,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAM;AAAET,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAI,CAACD,QAAL,EAAe;AACbU,QAAAA,KAAK,CAAC,eAAD,CAAL;AACA;AACD,OANC,CAQF;;;AACA,YAAMN,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAvB,CATE,CAWF;;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,QAAQ,CAAC,CAAD,CAAjC;AACAN,MAAAA,iBAAiB,CAACM,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACD,KAdD,CAcE,OAAOO,KAAP,EAAc;AACdT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACD;AACF,GAlBD;;AAoBA,QAAMC,oBAAoB,GAAG,YAAY;AACvC,UAAMC,gBAAgB,GAAG,4CAAzB;;AAEA,QAAI;AACF,YAAM;AAAEb,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAID,QAAJ,EAAc;AACZ,cAAMc,QAAQ,GAAG,IAAIpB,MAAM,CAACqB,SAAP,CAAiBC,YAArB,CAAkChB,QAAlC,CAAjB;AACA,cAAMiB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,iBAAiB,GAAG,IAAIzB,MAAM,CAAC0B,QAAX,CAAoBP,gBAApB,EAAsClB,kBAAkB,CAAC0B,GAAzD,EAA8DJ,MAA9D,CAA1B;AAEAf,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACA,YAAImB,MAAM,GAAG,MAAMH,iBAAiB,CAACI,UAAlB,EAAnB;AAEArB,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,cAAMmB,MAAM,CAACE,IAAP,EAAN;AAEAtB,QAAAA,OAAO,CAACC,GAAR,CAAa,2DAA0DmB,MAAM,CAACG,IAAK,EAAnF;AACD,OAZD,MAYO;AACLvB,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD;AACF,KAlBD,CAkBE,OAAOQ,KAAP,EAAc;AACdT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAZ;AACD;AACF,GAxBD,CAjDqB,CA2ErB;;;AACA,QAAMe,2BAA2B,GAAG,mBAClC;AAAQ,IAAA,OAAO,EAAEjB,aAAjB;AAAgC,IAAA,SAAS,EAAC,uBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CA5EqB,CAkFrB;;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,wBAAwB;AACzB,GAFQ,EAEN,EAFM,CAAT,CAnFqB,CAuFrB;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACA;AAAK,QAAA,SAAS,EAAC,6BAAf;AAA6C,QAAA,GAAG,EAAC,4FAAjD;AAA8I,QAAA,GAAG,EAAC;AAAlJ;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,qBAAf;AAAA,kCACE;AAAI,YAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAG,YAAA,SAAS,EAAC,MAAb;AAAA,gGAAuE;AAAA;AAAA;AAAA;AAAA,oBAAvE,qEACkD;AAAA;AAAA;AAAA;AAAA,oBADlD,iEAE8C;AAAA;AAAA;AAAA;AAAA,oBAF9C,kEAG+C;AAAA;AAAA;AAAA;AAAA,oBAH/C;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAQCF,cAAc,KAAK,EAAnB,GACK6B,2BAA2B,EADhC,gBAGK;AAAQ,YAAA,OAAO,EAAEd,oBAAjB;AAAuC,YAAA,SAAS,EAAC,aAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXN;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CAtHD;;GAAMhB,Q;;KAAAA,Q;AAwHI,eAAeA,QAAf,C,CAEI;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport SecretLurrySociety from './utils/SecretLurrySociety.json'\nimport './styles/Mint.css'\n\nconst MintPage = () => {\n  // State variable to store user's public wallet address\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  \n  const checkIfWalletIsConnected = async () => {\n    // First make sure we have access to window.ethereum\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    // Check if authorized to access user's wallet\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    // Users can have multiple authorized accounts, so we grab the first once\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n    } else {\n      console.log(\"No authorized account found\")\n    }\n  }\n\n  // Connect wallet function used when user clicks connect wallet button\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      // Request access to user's account\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      // Should print out the user's public address to the console\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0x26b5180d5ce04124ED1f4402f7c9fDB108856d8c\";\n \n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, SecretLurrySociety.abi, signer);\n        \n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.mintALurry();\n\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  // Runs the check function on page load\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  //  Added a conditional render! We don't want to show Connect to Wallet if we're already conencted :).\n\n  return (\n    <div className=\"MintPage\">\n    <div className=\"lurry-welcome\">\n    <img className=\"crayon-lurry-mintpage-image\" src=\"https://gateway.pinata.cloud/ipfs/QmXHdHBYwQH3uQqKqXUJotZXHqTU6KeTHhdx9czqp4FJW8?preview=1\" alt=\"Crayon Lurry\"></img>\n    <div className=\"welcome-box\">\n      <div className=\"welcome-box_content\">\n        <h3 className=\"welcome\">Welcome!</h3>\n        <p className=\"info\">Floatie Lurry is a collection of 12 unique Lurry’s.<br></br> \n        Inspired by the bright yellow rubber duck that all<br></br>\n        programmers know and explaining their code to.<br></br>\n        Floatie Lurry NFTs live, breathe an swim on the<br></br>\n        blockchain.</p>\n        {/* <div className=\"button-container\"> */}\n      {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button onClick={askContractToMintNft} className=\"mint-button\">\n              Mint!\n            </button>\n          )}\n          {/* </div> */}\n\n      </div>\n    </div>\n    </div>\n\n    </div>\n\n  );\n};\n\n          export default MintPage;\n\n              // <div className=\"App\">\n    //   <div className=\"container\">\n    //     <div className=\"header-container\">\n    //       <p className=\"header gradient-text\">Secret Lurry Society</p>\n    //       <p className=\"sub-text\">\n    //         Mint a Lurry NFT. Gain access to the most exclusive programming community on the Ethereum Blockchain.\n    //       </p>\n    //       {currentAccount === \"\" ? (\n    //         renderNotConnectedContainer()\n    //       ) : (\n    //         <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n    //           Mint NFT\n    //         </button>\n    //       )}\n    //     </div>\n    //     <div className=\"footer-container\">\n\n    //     </div>\n    //   </div>\n    // </div>"]},"metadata":{},"sourceType":"module"}