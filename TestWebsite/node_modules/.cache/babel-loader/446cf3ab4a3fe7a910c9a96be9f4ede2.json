{"ast":null,"code":"var _jsxFileName = \"/home/labber/projects/Test-Lurry-Contract-Website/TestWebsite/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport { ethers } from \"ethers\";\nimport SecretLurrySociety from \"./utils/SecretLurrySociety.json\";\nimport Roadmap from \"./components/Roadmap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  _s();\n\n  // State variable to store user's public wallet address\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    // First make sure we have access to window.ethereum\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    } // Check if authorized to access user's wallet\n\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    }); // Users can have multiple authorized accounts, so we grab the first once\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }; // Connect wallet function used when user clicks connect wallet button\n\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      } // Request access to user's account\n\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      }); // Should print out the user's public address to the console\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0x26b5180d5ce04124ED1f4402f7c9fDB108856d8c\";\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, SecretLurrySociety.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.mintALurry();\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; // Render Methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this); // Runs the check function on page load\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []); //  Added a conditional render! We don't want to show Connect to Wallet if we're already conencted :).\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"Secret Lurry Society\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Mint a Lurry NFT. Gain access to the most exclusive programming community on the Ethereum Blockchain.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: askContractToMintNft,\n          className: \"cta-button connect-wallet-button\",\n          children: \"Mint NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Roadmap, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/labber/projects/Test-Lurry-Contract-Website/TestWebsite/src/App.js"],"names":["React","useEffect","useState","ethers","SecretLurrySociety","Roadmap","OPENSEA_LINK","TOTAL_MINT_COUNT","App","currentAccount","setCurrentAccount","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","connectWallet","alert","error","askContractToMintNft","CONTRACT_ADDRESS","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","nftTxn","mintALurry","wait","hash","renderNotConnectedContainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport { ethers } from \"ethers\";\nimport SecretLurrySociety from \"./utils/SecretLurrySociety.json\";\nimport Roadmap from \"./components/Roadmap\";\n\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  // State variable to store user's public wallet address\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    // First make sure we have access to window.ethereum\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    // Check if authorized to access user's wallet\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    // Users can have multiple authorized accounts, so we grab the first once\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  // Connect wallet function used when user clicks connect wallet button\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      // Request access to user's account\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      // Should print out the user's public address to the console\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0x26b5180d5ce04124ED1f4402f7c9fDB108856d8c\";\n\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          SecretLurrySociety.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.mintALurry();\n\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n\n        console.log(\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n        );\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // Runs the check function on page load\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  //  Added a conditional render! We don't want to show Connect to Wallet if we're already conencted :).\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Secret Lurry Society</p>\n          <p className=\"sub-text\">\n            Mint a Lurry NFT. Gain access to the most exclusive programming\n            community on the Ethereum Blockchain.\n          </p>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button\n              onClick={askContractToMintNft}\n              className=\"cta-button connect-wallet-button\"\n            >\n              Mint NFT\n            </button>\n          )}\n        </div>\n        <div className=\"footer-container\"></div>\n      </div>\n      <Roadmap />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}