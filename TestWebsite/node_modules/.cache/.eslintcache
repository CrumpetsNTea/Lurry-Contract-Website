[{"/Users/tobias/LurryTestContract&Website/TestWebsite/src/index.js":"1","/Users/tobias/LurryTestContract&Website/TestWebsite/src/App.js":"2"},{"size":226,"mtime":1641699959897,"results":"3","hashOfConfig":"4"},{"size":3713,"mtime":1642179912460,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"ves57f",{"filePath":"9","messages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/tobias/LurryTestContract&Website/TestWebsite/src/index.js",[],["12","13"],"/Users/tobias/LurryTestContract&Website/TestWebsite/src/App.js",["14","15","16"],"import React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { ethers } from \"ethers\";\nimport SecretLurrySociety from './utils/SecretLurrySociety.json'\n\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  // State variable to store user's public wallet address\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  \n  const checkIfWalletIsConnected = async () => {\n    // First make sure we have access to window.ethereum\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    // Check if authorized to access user's wallet\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    // Users can have multiple authorized accounts, so we grab the first once\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n    } else {\n      console.log(\"No authorized account found\")\n    }\n  }\n\n  // Connect wallet function used when user clicks connect wallet button\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      // Request access to user's account\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      // Should print out the user's public address to the console\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0x26b5180d5ce04124ED1f4402f7c9fDB108856d8c\";\n \n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, SecretLurrySociety.abi, signer);\n        \n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.mintALurry();\n\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  // Runs the check function on page load\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  //  Added a conditional render! We don't want to show Connect to Wallet if we're already conencted :).\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Secret Lurry Society</p>\n          <p className=\"sub-text\">\n            Mint a Lurry NFT. Gain access to the most exclusive programming community on the Ethereum Blockchain.\n          </p>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n              Mint NFT\n            </button>\n          )}\n        </div>\n        <div className=\"footer-container\">\n\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;",{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","severity":1,"message":"22","line":3,"column":8,"nodeType":"23","messageId":"24","endLine":3,"endColumn":19},{"ruleId":"21","severity":1,"message":"25","line":7,"column":7,"nodeType":"23","messageId":"24","endLine":7,"endColumn":19},{"ruleId":"21","severity":1,"message":"26","line":8,"column":7,"nodeType":"23","messageId":"24","endLine":8,"endColumn":23},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'twitterLogo' is defined but never used.","Identifier","unusedVar","'OPENSEA_LINK' is assigned a value but never used.","'TOTAL_MINT_COUNT' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]