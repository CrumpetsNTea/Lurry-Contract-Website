[{"/home/labber/projects/Test-Lurry-Contract-Website/TestWebsite/src/index.js":"1","/home/labber/projects/Test-Lurry-Contract-Website/TestWebsite/src/App.js":"2","/home/labber/projects/Test-Lurry-Contract-Website/TestWebsite/src/components/Roadmap.js":"3"},{"size":226,"mtime":1642187347188,"results":"4","hashOfConfig":"5"},{"size":3911,"mtime":1642187911318,"results":"6","hashOfConfig":"5"},{"size":764,"mtime":1642190800988,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1aq4aui",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/labber/projects/Test-Lurry-Contract-Website/TestWebsite/src/index.js",[],["16","17"],"/home/labber/projects/Test-Lurry-Contract-Website/TestWebsite/src/App.js",["18","19","20"],"import React, { useEffect, useState } from \"react\";\nimport \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport { ethers } from \"ethers\";\nimport SecretLurrySociety from \"./utils/SecretLurrySociety.json\";\nimport Roadmap from \"./components/Roadmap\";\n\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  // State variable to store user's public wallet address\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    // First make sure we have access to window.ethereum\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    // Check if authorized to access user's wallet\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    // Users can have multiple authorized accounts, so we grab the first once\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  // Connect wallet function used when user clicks connect wallet button\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      // Request access to user's account\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      // Should print out the user's public address to the console\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0x26b5180d5ce04124ED1f4402f7c9fDB108856d8c\";\n\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          SecretLurrySociety.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.mintALurry();\n\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n\n        console.log(\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n        );\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // Runs the check function on page load\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  //  Added a conditional render! We don't want to show Connect to Wallet if we're already conencted :).\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Secret Lurry Society</p>\n          <p className=\"sub-text\">\n            Mint a Lurry NFT. Gain access to the most exclusive programming\n            community on the Ethereum Blockchain.\n          </p>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button\n              onClick={askContractToMintNft}\n              className=\"cta-button connect-wallet-button\"\n            >\n              Mint NFT\n            </button>\n          )}\n        </div>\n        <div className=\"footer-container\"></div>\n      </div>\n      <Roadmap />\n    </div>\n  );\n};\n\nexport default App;\n","/home/labber/projects/Test-Lurry-Contract-Website/TestWebsite/src/components/Roadmap.js",[],{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":3,"column":8,"nodeType":"27","messageId":"28","endLine":3,"endColumn":19},{"ruleId":"25","severity":1,"message":"29","line":8,"column":7,"nodeType":"27","messageId":"28","endLine":8,"endColumn":19},{"ruleId":"25","severity":1,"message":"30","line":9,"column":7,"nodeType":"27","messageId":"28","endLine":9,"endColumn":23},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"no-unused-vars","'twitterLogo' is defined but never used.","Identifier","unusedVar","'OPENSEA_LINK' is assigned a value but never used.","'TOTAL_MINT_COUNT' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]